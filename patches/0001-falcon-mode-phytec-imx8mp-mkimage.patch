diff --git a/iMX8M/soc.mak b/iMX8M/soc.mak
index c505dea..427c0c5 100644
--- a/iMX8M/soc.mak
+++ b/iMX8M/soc.mak
@@ -208,6 +208,12 @@ ifeq ($(HDMI),yes)
 flash_evk: $(MKIMG) signed_hdmi_imx8m.bin u-boot-spl-ddr.bin u-boot.itb
 	./mkimage_imx8 -fit -signed_hdmi signed_hdmi_imx8m.bin -loader u-boot-spl-ddr.bin $(SPL_LOAD_ADDR) -second_loader u-boot.itb 0x40200000 0x60000 -out $(OUTIMG)
 
+
+# Falcon mode AN13709 4.3.10. Generate the bootloader image with SPL only
+flash_evk_falcon: $(MKIMG) signed_hdmi_imx8m.bin u-boot-splddr.bin
+	./mkimage_imx8 -fit -signed_hdmi signed_hdmi_imx8m.bin -loader u-boot-spl-ddr.bin $(SPL_LOAD_ADDR) -out $(OUTIMG)
+
+
 flash_evk_dual_bootloader: $(MKIMG) signed_hdmi_imx8m.bin u-boot-spl-ddr.bin u-boot.itb
 	./mkimage_imx8 -fit -signed_hdmi signed_hdmi_imx8m.bin -loader u-boot-spl-ddr.bin $(SPL_LOAD_ADDR) -out $(OUTIMG)
 	./mkimage_imx8 -fit_ivt u-boot.itb 0x40200000 0x0 -out u-boot-ivt.itb
@@ -276,6 +282,13 @@ endif
 flash_evk_no_hdmi: $(MKIMG) u-boot-spl-ddr.bin u-boot.itb
 	./mkimage_imx8 -version $(VERSION) -fit -loader u-boot-spl-ddr.bin $(SPL_LOAD_ADDR) -second_loader u-boot.itb 0x40200000 0x60000 -out $(OUTIMG)
 
+
+# Falcon mode AN13709 4.3.10. Generate the bootloader image with SPL only
+flash_evk_falcon: flash_evk_falcon_no_hdmi
+flash_evk_falcon_no_hdmi: $(MKIMG) u-boot-spl-ddr.bin
+	./mkimage_imx8 -version $(VERSION) -loader u-boot-spl-ddr.bin $(SPL_LOAD_ADDR) -out $(OUTIMG)
+
+
 flash_evk_no_hdmi_dual_bootloader: $(MKIMG) u-boot-spl-ddr.bin u-boot.itb
 	./mkimage_imx8 -version $(VERSION) -fit -loader u-boot-spl-ddr.bin $(SPL_LOAD_ADDR) -out $(OUTIMG)
 	./mkimage_imx8 -fit_ivt u-boot.itb 0x40200000 0x0 -out u-boot-ivt.itb
diff --git a/mkimage_fit_atf_kernel.sh b/mkimage_fit_atf_kernel.sh
new file mode 100755
index 0000000..c660e48
--- /dev/null
+++ b/mkimage_fit_atf_kernel.sh
@@ -0,0 +1,91 @@
+#!/bin/sh
+
+## This script creates the FIT source image (.its) which includes ATF and Kernel.
+## How to use on i.MX8M:
+# cd iMX8M
+## for i.MX8MM
+# ATF_LOAD_ADDR=0x00920000 KERNEL_LOAD_ADDR=0x40200000 ../mkimage_fit_atf_kernel.sh > Image.its
+## for i.MX8MN
+# ATF_LOAD_ADDR=0x00960000 KERNEL_LOAD_ADDR=0x40200000 ../mkimage_fit_atf_kernel.sh > Image.its
+## for i.MX8MP
+# ATF_LOAD_ADDR=0x00970000 KERNEL_LOAD_ADDR=0x40200000 ../mkimage_fit_atf_kernel.sh > Image.its
+## To generate the FIT binary run:
+# ./mkimage_uboot -E -p 0x3000 -f Image.its Image.itb
+## ------------------------------------------------------------------------------------------------
+## How to use on i.MX93:
+# cd iMX9
+# ATF_LOAD_ADDR=0x204e0000 KERNEL_LOAD_ADDR=0x80200000 ../mkimage_fit_atf_kernel.sh > Image.its
+## To generate the FIT binary run:
+# ./mkimage_uboot -E -p 0x3000 -f Image.its Image.itb
+
+[ -z "$BL31" ] && BL31="bl31.bin"
+
+if [ ! -f $BL31 ]; then
+	echo "ERROR: BL31 file $BL31 NOT found" >&2
+	exit 0
+else
+	echo "$BL31 size: " >&2
+	ls -lct $BL31 | awk '{print $5}' >&2
+fi
+
+if [ -z "$ATF_LOAD_ADDR" ]; then
+	echo "ERROR: BL31 load address is not set" >&2
+	exit 0
+fi
+
+[ -z "$KERNEL_IMAGE" ] && KERNEL_IMAGE="Image"
+
+if [ ! -f $KERNEL_IMAGE ]; then
+	echo "ERROR: Kernel file $KERNEL_IMAGE NOT found" >&2
+	exit 0
+else
+	echo "$KERNEL_IMAGE size: " >&2
+	ls -lct $KERNEL_IMAGE | awk '{print $5}' >&2
+fi
+
+if [ -z "$KERNEL_LOAD_ADDR" ]; then
+	echo "ERROR: Kernel load address is not set" >&2
+	exit 0
+fi
+
+cat << __HEADER_EOF
+/dts-v1/;
+
+/ {
+	description = "Image file for i.MX8M Linux Kernel";
+	#address-cells = <1>;
+
+	images {
+
+		kernel {
+			description = "AARM64 Linux kernel";
+			data = /incbin/("$KERNEL_IMAGE");
+			type = "kernel";
+			arch = "arm64";
+			compression = "none";
+			load = <$KERNEL_LOAD_ADDR>;
+			entry = <$KERNEL_LOAD_ADDR>;
+		};
+
+		atf-1 {
+			description = "ARM Trusted Firmware";
+			data = /incbin/("$BL31");
+			arch = "arm64";
+			type = "firmware";
+			compression = "none";
+			load = <$ATF_LOAD_ADDR>;
+			entry = <$ATF_LOAD_ADDR>;
+		};
+	};
+
+	configurations {
+		default = "config-1";
+		config-1 {
+			description = "Boot Linux kernel";
+			kernel = "kernel";
+			firmware = "atf-1";
+			loadables = "kernel";
+		};
+	};
+};
+__HEADER_EOF
